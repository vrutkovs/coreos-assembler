#!/usr/bin/python3 -u

'''
    This script is called by `build` command and updates builds timestamp.
'''

import argparse
import collections
import os
import sys

from cosalib.builds import Builds
from cosalib.cmdlib import get_timestamp

Build = collections.namedtuple('Build', ['id', 'timestamp', 'basearches'])

parser = argparse.ArgumentParser()
parser.add_argument("--workdir", default='.', help="Path to workdir")
args = parser.parse_args()

builds = Builds(args.workdir)

scanned_builds = []
builds_dir = os.path.join(args.workdir, "builds")

# first, pick up all the builds from the dir itself
with os.scandir(builds_dir) as it:
    for entry in it:
        # ignore non-dirs
        if not entry.is_dir(follow_symlinks=False):
            # those are really the only two non-dir things we expect there
            if entry.name not in ['builds.json', 'latest']:
                print(f"Ignoring non-directory {entry.path}")
            continue

        # scan all per-arch builds, pick up the most recent build of those as
        # the overall "build" timestamp for pruning purposes
        with os.scandir(entry.path) as basearch_it:
            multiarch_build = None
            for basearch_entry in basearch_it:
                # ignore non-dirs
                if not basearch_entry.is_dir(follow_symlinks=False):
                    print(f"Ignoring non-directory {basearch_entry.path}")
                    continue
                ts = get_timestamp(basearch_entry)
                if not ts:
                    continue
                if not multiarch_build:
                    multiarch_build = Build(id=entry.name, timestamp=ts,
                                            basearches=[basearch_entry.name])
                else:
                    multiarch_build.basearches += [basearch_entry.name]
                    multiarch_build.timestamp = max(
                        multiarch_build.timestamp, ts)
            if multiarch_build:
                scanned_builds.append(multiarch_build)

# just get the trivial case out of the way
if len(scanned_builds) == 0:
    print("No builds found!")
    sys.exit(0)

# sort by timestamp, newest first
scanned_builds = sorted(scanned_builds,
                        key=lambda x: x.timestamp,
                        reverse=True)

builds.raw()['builds'] = []
for build in reversed(scanned_builds):
    for basearch in build.basearches:
        builds.insert_build(build.id, basearch)

builds.bump_timestamp()
print("Build timestamp was updated")
